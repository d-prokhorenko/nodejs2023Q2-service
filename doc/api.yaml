openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

components:
  schemas:
    User_Response:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
        login:
          type: string
          example: TestUser
        version:
          type: integer
          example: 1
        createAt:
          type: integer
          example: 1655000000
        updateAt:
          type: integer
          example: 1655000000
      required:
        - id
        - login
        - version
        - createAt
        - updateAt
    User_Create_DTO:
      type: object
      properties:
        login:
          type: string
          example: TestUser
        password:
          type: string
          example: TestPassword
      required:
        - login
        - password
    User_Update_DTO:
      type: object
      properties:
        oldPassword:
          type: string
          description: The users old password
          example: oldPassword
        newPassword:
          type: string
          description: The users new password
          example: newPassword
      required:
        - oldPassword
        - newPassword
    User_Updated_Response:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
        login:
          type: string
          example: TestUser
        version:
          type: integer
          example: 2
        createAt:
          type: integer
          example: 1655000000
        updateAt:
          type: integer
          example: 1655999999
      required:
        - id
        - login
        - version
        - createAt
        - updateAt
    Artist_Response:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
        - grammy
    Artist_Create_DTO:
      type: object
      properties:
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    Artist_Update_DTO:
      type: object
      properties:
        name:
          type: string
          description: Old/new name value
          example: Freddie Mercury
        grammy:
          type: boolean
          example: true
          description: Old/new grammy value
      required:
        - name
        - grammy
    Artist_Updated_Response:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: true
      required:
        - id
        - name
        - grammy
    Album_Response:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          example: null
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    Album_Create_DTO:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          example: null
          nullable: true
      required:
        - name
        - year
        - artistId
    Album_Update_DTO:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
          description: Old/new name value
        year:
          type: integer
          example: 1993
          description: Old/new year value
        artistId:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
          nullable: true
          description: Old/new artistId value
      required:
        - name
        - year
        - artistId
    Album_Updated_Response:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1993
        artistId:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    Track_Response:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          example: null
          nullable: true
        albumId:
          type: string
          format: uuid
          example: null
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    Track_Create_DTO:
      type: object
      properties:
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          example: null
          nullable: true
        albumId:
          type: string
          format: uuid
          example: null
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - name
        - artistId
        - albumId
        - duration
    Track_Update_DTO:
      type: object
      properties:
        name:
          type: string
          example: The Show Must Go On
          description: Old/new name value
        artistId:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
          nullable: true
          description: Old/new artistId value
        albumId:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
          nullable: true
          description: Old/new albumId value
        duration:
          type: integer
          example: 262
          description: Old/new duration value (In seconds)
      required:
        - name
        - artistId
        - albumId
        - duration
    Track_Updated_Response:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
          nullable: true
        albumId:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    Favorites_Response:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist_Response'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album_Response'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track_Response'
      required:
        - artists
        - albums
        - tracks

paths:
  /user:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User_Response'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_Create_DTO'
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Response'
        400:
          description: Bad request. body does not contain required fields
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get single user by id
      description: Get single user by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Response'
        400:
          description: Bad request. userId is invalid (not uuid)
        404:
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user's password
      description: Updates a user's password by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_Update_DTO'
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Updated_Response'
        400:
          description: Bad request. userId is invalid (not uuid)
        403:
          description: oldPassword is wrong
        404:
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID.
      responses:
        204:
          description: The user has been deleted
        400:
          description: Bad request. userId is invalid (not uuid)
        404:
          description: User not found
  /track:
    get:
      tags:
        - Track
      summary: Get tracks list
      description: Gets all library tracks list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track_Response'
    post:
      tags:
        - Track
      summary: Add new track
      description: Add new track information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track_Create_DTO'
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track_Response'
        400:
          description: Bad request. body does not contain required fields
  /track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
    get:
      tags:
        - Track
      summary: Get single track by id
      description: Gets single track by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track_Response'
        400:
          description: Bad request. trackId is invalid (not uuid)
        404:
          description: Track was not found.
    put:
      tags:
        - Track
      summary: Update track information
      description: Update library track information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track_Update_DTO'
      responses:
        200:
          description: The track has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track_Updated_Response'
        400:
          description: Bad request. trackId is invalid (not uuid)
        404:
          description: Track was not found.
    delete:
      tags:
        - Track
      summary: Delete track
      description: Delete track from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. trackId is invalid (not uuid)
        404:
          description: Track was not found.
  /album:
    get:
      tags:
        - Album
      summary: Get albums list
      description: Gets all library albums list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album_Response'
    post:
      tags:
        - Album
      summary: Add new album
      description: Add new album information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album_Create_DTO'
      responses:
        201:
          description: Album is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album_Response'
        400:
          description: Bad request. body does not contain required fields
  /album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
    get:
      tags:
        - Album
      summary: Get single album by id
      description: Gets single album by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album_Response'
        400:
          description: Bad request. albumId is invalid (not uuid)
        404:
          description: Album was not found.
    put:
      tags:
        - Album
      summary: Update album information
      description: Update library album information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album_Update_DTO'
      responses:
        200:
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album_Updated_Response'
        400:
          description: Bad request. albumId is invalid (not uuid)
        404:
          description: Album was not found.
    delete:
      tags:
        - Album
      summary: Delete album
      description: Delete album from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. albumId is invalid (not uuid)
        404:
          description: Album was not found.
  /artist:
    get:
      tags:
        - Artist
      summary: Get all artists
      description: Gets all artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist_Response'
    post:
      tags:
        - Artist
      summary: Add new artist
      description: Add new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist_Create_DTO'
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist_Response'
        400:
          description: Bad request. body does not contain required fields
  /artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
    get:
      tags:
        - Artist
      summary: Get single artist by id
      description: Get single artist by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist_Response'
        400:
          description: Bad request. artistId is invalid (not uuid)
        404:
          description: Artist was not found.
    put:
      tags:
        - Artist
      summary: Update artist information
      description: Update artist information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist_Update_DTO'
      responses:
        200:
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist_Updated_Response'
        400:
          description: Bad request. artistId is invalid (not uuid)
        404:
          description: Artist was not found.
    delete:
      tags:
        - Artist
      summary: Delete artist
      description: Delete artist from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        404:
          description: Artist was not found.
  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Gets all favorites movies, tracks and books
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites_Response'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
    post:
      tags:
        - Favorites
      summary: Add track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad. trackId is invalid (not uuid)
        422:
          description: Track with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete track from favorites
      description: Delete track from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad. trackId is invalid (not uuid)
        404:
          description: Track was not found.
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
    post:
      tags:
        - Favorites
      summary: Add album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad. albumId is invalid (not uuid)
        422:
          description: Album with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete album from favorites
      description: Delete album from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad. albumId is invalid (not uuid)
        404:
          description: Album was not found.
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: ec851fa9-0044-41e9-9393-d38487d17656
    post:
      tags:
        - Favorites
      summary: Add artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        422:
          description: Artist with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete artist from favorites
      description: Delete artist from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        404:
          description: Artist was not found.
